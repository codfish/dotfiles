#!/usr/bin/env zsh

DOTFILES="${HOME}/.dotfiles"
DOTFILES_REPO=${DOTFILES_REPO:-codfish/dotfiles}
DOTFILES_TARBALL_PATH="https://github.com/codfish/dotfiles/tarball/main"
ZSH="$HOME/.dotfiles/oh-my-zsh"
BREW_PREFIX=$(brew --prefix)

cd ${DOTFILES}

source ./lib/help
source ./lib/utils
source ./lib/brew
source ./lib/node
source ./lib/pip
source ./lib/composer
source ./lib/list_apps

# Help text
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
  run_help
  exit
fi

# Test for known flags
for opt in $@
do
  case $opt in
    --no-packages) no_packages=true ;;
    --no-sync) no_sync=true ;;
    --no-macos) no_macos=true ;;
    --with-apps) with_apps=true ;;
    -*|--*) e_warning "Warning: invalid option $opt" ;;
  esac
done

# Conditionally sync with the remote repository
if [[ $no_sync ]]; then
  printf "Skipped dotfiles sync.\n"
else
  e_header "Syncing dotfiles..."
  # Pull down the latest changes
  git pull --rebase origin main
fi

link() {
  # Force create/replace the symlink.
  ln -fs "${DOTFILES}/${1}" "${HOME}/${2}"
}

mirrorfiles() {
  # Copy `.gitconfig`.
  # Any global git commands in `~/.zshrc.before` will be written to
  # `.gitconfig`. This prevents them being committed to the repository.
  rsync -avz --quiet ${DOTFILES}/dotfiles/gitconfig  ${HOME}/.gitconfig

  # Create the necessary symbolic links between the `.dotfiles` and `HOME`
  # directory.
  link "dotfiles/zshrc"           ".zshrc"
  link "dotfiles/gemrc"           ".gemrc"
  link "dotfiles/curlrc"          ".curlrc"
  link "dotfiles/gitattributes"   ".gitattributes"
  link "dotfiles/gitignore"       ".gitignore"

  e_success "Dotfiles update complete!"
}

# Ask before potentially overwriting files
seek_confirmation "Warning: This step may overwrite your existing dotfiles."

if is_confirmed; then
  mirrorfiles
else
  printf "Aborting...\n"
fi

# Install and update packages
if [[ $no_packages ]]; then
  printf "Skipped package installations.\n"
else
  printf "Updating packages...\n"

  # Install Homebrew formulae
  run_brew

  # Install composer
  install_composer

  # Initialize nvm
  init_nvm

  # Install latest node version
  install_latest_node

  # Install common npm packages
  install_npm_packages

  # install pip packages
  install_termcolor
fi

# Ask before potentially overwriting macOS defaults
if [[ $no_macos ]]; then
  printf "Skipped macOS settings update.\n"
else
  seek_confirmation "Warning: This step may modify your macOS system defaults."

  if is_confirmed; then
    bash ./bin/macosdefaults
    e_success "macOS settings updated! You may need to restart."
  else
    printf "Skipped macOS settings update.\n"
  fi
fi

# Conditionally install macOS applications using brew cask
if [[ $with_apps ]]; then
  # Ask before installing apps
  seek_confirmation "Warning: This step will attempt to install macOS GUI applications."

  if is_confirmed; then
    # Install applications through Homebrew Cask
    run_brew_cask
    run_list_apps
  else
    printf "Skipped macOS app installations.\n"
  fi
else
  printf "Skipped macOS app installations.\n"
fi
