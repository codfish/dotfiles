---
syntax: typescript
tags: [ typescript, javascript, ts, development ]
---

/* Create a union type from the values of a js object */
/* Really good video on this: https://www.youtube.com/watch?v=6M9aZzm-kEc */
const statuses = {
  CANCEL: 0,
  PENDING: 1,
  APPROVED: 2,
  // ...
} as const;

/*  IMPORTANT: The `as const` is required to make the object's values readonly. */
/*  Without it, the values would be mutable and infered as `number` instead of specific values like `0`, `1`, `2`, etc. */
/*  Objects.freeze() will do this as well, but with some caveats: */
/*     - it's not a deep freeze */
/*     - it's not a type-safe way to make the values readonly */
/*     - it happens at runtime, not at compile time */

// create a union type from the keys of the object
type StatusKeys = keyof typeof statuses; // => 'CANCEL' | 'PENDING' | 'APPROVED' | ...
// create a union type from the values of the object by indexing the typed object with the keys
type Status = typeof statuses[StatusKeys]; // => type Status = { readonly CANCEL: 0, readonly PENDING: 1, readonly APPROVED: 2, ... }

// Now we can use the value union type to pass in any of the values of the object
function changeStatus(status: Status) {}
// => changeStatus(0 | 1 | 2 | statuses.CANCEL | statuses.PENDING | statuses.APPROVED | ...)



/* Extending an interface with an override */
/* Context: "Extensions" are due payments but the payment type is always extension fee. */
export interface Extension extends Omit<Duepayment, 'payment_type'> {
  payment_type: 'extension_fee';
}



/* Use ReturnType<typeof f> to grab the return type of another reference. */
async handleRedirectCallback(): ReturnType<typeof auth0.handleRedirectCallback>



/* Enum with string values */
export enum Splits {
  Funding_On_T = 'liquidity_scale_pod__funding_on_t',
  Reverse_Factoring_Opt_In = 'payments_xp_pod__reverse_factoring_opt_in',
  Dispute_Resolution_Enabled = 'liquidity_scale_pod__dispute_resolution',
  Add_Direct_Payment_Invoice = 'payments_xp_pod__add_direct_payment_invoice',
  Auto_Assignment_Enabled = 'payments_xp_pod__auto_assignment_enabled',
}



/* Convert an enum to a string union */
type SplitsStringUnion = `${Splits}`



/* When types aren't made available to you, you can use `Parameters` to infer them */
/* from a function's params. */
/* This is saying our login functions options parameter, is the same type as the Auth0 plugin's `getAccessTokenSilently` */
/* methods' first parameter. */
import { Auth0Plugin } from '@auth0/auth0-vue';
async function login(options?: Parameters<Auth0Plugin['getAccessTokenSilently']>[0]): Promise<UserState | void> {



/* Specify an object type, but with a specific property set */
getAccessTokenSilently(
  options: GetTokenSilentlyOptions & { detailedResponse: true }
): Promise<GetTokenSilentlyVerboseResponse>;



/* Use the numeric keys of an object as a type, and allow numbers or strings */
type ErrorCodes = 401 | 403 | 404 | 500;
const errors: Record<ErrorCodes, { title: string; description: string }> = {
  401: {
    title: '401',
    description: 'Unauthenticated',
  },
  403: {
    title: '403',
    description: 'Unauthorized',
  },
  404: {
    title: '404',
    description: 'Not found',
  },
  500: {
    title: '500',
    description: 'Server error',
  },
};

export interface HttpErrorProps {
  /**
   * The error code.
   */
  errorCode: keyof typeof errors | `${keyof typeof errors}`;
}



/* Functions with multiple signatures. */

/*    const generateInvoice = (overrides) => ({ id: uuid(), balance: 15799, classification: "Adult Use", ...overrides}); */
/*    const generateInvoices = createFixtureGenerator(generateInvoice); */
/*    generateInvoices()                    // => Single invoice object */
/*    generateInvoices(1)                   // => Single invoice object */
/*    generateInvoices(1, { foo: 'bar' })   // => Single invoice object, override `foo` to equal `'bar'` */
/*    generateInvoices({ foo: 'bar' })      // => Single invoice object, override `foo` to equal `'bar'` */
/*    generateInvoices(10)                  // => Array of 10 invoice objects */
/*    generateInvoices(10, { foo: 'bar' })  // => Array of 10 invoice objects, override `foo` to equal `'bar'` in each */
export default function createFixtureGenerator<T>(fixtureFn: (overrides?: Partial<T>, index?: number) => T) {
  function _generator(): T;
  function _generator<TNum extends 1>(num: TNum, overrides?: Partial<T>): T;
  function _generator(num: Partial<T>): T;
  function _generator<TNum extends number>(num: TNum, overrides?: Partial<T>): T[];
  function _generator(num: number | Partial<T> = 1, overrides = {}) {
    // if the first param is not a number, it must be the overrides
    if (typeof num !== 'number') {
      return fixtureFn(num);
    } else if (num === 1) {
      // If num is 1, then we don't want to return an array, so just generate one with any potential overrides
      return fixtureFn(overrides);
    } else {
      // Otherwise, let's generate however many requested data objects
      // eslint-disable-next-line prefer-spread
      return Array.apply(null, Array(num)).map((_el, index) => fixtureFn(overrides, index));
    }
  }

  return _generator;
}
